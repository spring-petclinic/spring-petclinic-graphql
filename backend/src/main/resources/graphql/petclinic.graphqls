# This file was generated. Do not edit manually.

schema {
    query: Query
    mutation: Mutation
    subscription: Subscription
}

"Interface that describes a Person, i.e. a Vet or an Owner"
interface Person {
    firstName: String!
    id: Int!
    lastName: String!
}

union AddVetPayload = AddVetErrorPayload | AddVetSuccessPayload

type AddOwnerPayload {
    owner: Owner!
}

type AddPetPayload {
    pet: Pet!
}

"Return Value of the addSpecialty Mutation"
type AddSpecialtyPayload {
    "The new Specialty including the assigned Id"
    specialty: Specialty!
}

type AddVetErrorPayload {
    error: String!
}

type AddVetSuccessPayload {
    vet: Vet
}

type AddVisitPayload {
    visit: Visit!
}

"""
For motivation of how the Mutation look see:
https://dev-blog.apollodata.com/designing-graphql-mutations-e09de826ed97
"""
type Mutation {
    " Add a new Owner"
    addOwner(input: AddOwnerInput!): AddOwnerPayload!
    " Add a new Pet"
    addPet(input: AddPetInput!): AddPetPayload!
    " Add a Specialty"
    addSpecialty(input: AddSpecialtyInput!): AddSpecialtyPayload!
    " Add a new Veterinary (only allowed for users having Role ROLE_MANAGER)"
    addVet(input: AddVetInput!): AddVetPayload!
    " Add a Visit"
    addVisit(input: AddVisitInput!): AddVisitPayload!
    removeSpecialty(input: RemoveSpecialtyInput!): RemoveSpecialtyPayload!
    " Change an existing owner"
    updateOwner(input: UpdateOwnerInput!): UpdateOwnerPayload!
    updatePet(input: UpdatePetInput!): UpdatePetPayload!
    " Update (rename) a Specialty"
    updateSpecialty(input: UpdateSpecialtyInput!): UpdateSpecialtyPayload!
}

" An Owner is someone who owns a Pet"
type Owner implements Person {
    address: String!
    city: String!
    firstName: String!
    id: Int!
    lastName: String!
    " A list of Pets this Owner owns"
    pets: [Pet!]!
    telephone: String!
}

"""
A pet that might or might not have been seen in this petclinic for
one or more visits
"""
type Pet {
    birthDate: Date!
    id: Int!
    name: String!
    owner: Owner!
    type: PetType!
    " All visits to our PetClinic of this Pet"
    visits: VisitConnection!
}

" The type (species) of a Pet"
type PetType {
    id: Int!
    name: String!
}

type OwnerConnection {
    edges: [OwnerEdge]!
    pageInfo: PageInfo!
}

type OwnerEdge {
    node: Owner!
    cursor: String!
}

type VetConnection {
    edges: [VetEdge]!
    pageInfo: PageInfo!
}

type VetEdge {
    node: Vet!
    cursor: String!
}

type PageInfo {
    hasPreviousPage: Boolean!
    hasNextPage: Boolean!
    startCursor: String
    endCursor: String
}

" The Query type provides all entry points to the PetClinic GraphQL schema"
type Query {
    me: User!
    " Return the Owner with the specified id"
    owner(id: Int!): Owner!

    # Note: OwnerConnection and all required types (Edge and PageInfo) could be
    #       added by Spring for GraphQL at runtime to the schema.
    #       Disadvantage is, that tooling has problems (Code Generator, IntelliJ plug-in)
    #       so I deceided to hand code the types instead.
    #       Nevertheless there is no need forJava classes for the Connection and dependent types,
    #       because Spring for GraphQL does the mapping for us.
    #
    # Note: first, after, last and before are automatically processed by Spring for GraphQL
    #       and are passed with a ScrollSubrange object to the QueryMapping function
    #
    #
    """
    Find a list of owners according to the specified position, filter and order

    Note that you either have to specify first _or_ last
    """
    owners(first:Int, after:String, last:Int, before:String,
        "Use a filter to narrow your search results"
        filter: OwnerFilter,
        order: [OwnerOrder!]): OwnerConnection!

    # owners(filter: OwnerFilter, orders: [OwnerOrder!], page: Int, size: Int): OwnerSearchResult!
    " Return the Pet with the specified id"
    pet(id: Int!): Pet
    " Return a List of all pets that have been registered in the PetClinic"
    pets: [Pet!]!
    " Return all known PetTypes"
    pettypes: [PetType!]!
    " Returns 'pong', can be used to verify GraphQL API is working"
    ping: String!
    specialties: [Specialty!]!
    " Return the specified Vet or null if undefined"
    vet(id: Int!): Vet
    " Return all known veterinaries"
    vets(first:Int, after:String, last:Int, before:String): VetConnection!
}

type RemoveSpecialtyPayload {
    specialties: [Specialty!]!
}

" Specialty of a Vetenarian"
type Specialty {
    id: Int!
    name: String!
}

type Subscription {
    onNewVisit: Visit!
}

type UpdateOwnerPayload {
    owner: Owner!
}

type UpdatePetPayload {
    pet: Pet!
}

" Return value of the UpdateSpecialty Mutation"
type UpdateSpecialtyPayload {
    " The updated Specialty"
    specialty: Specialty!
}

type User {
    fullname: String!
    username: String!
}

" A Vetenerian"
type Vet implements Person {
    " The Vetenarian's first name"
    firstName: String!
    id: Int!
    " The Vetenarian's last name"
    lastName: String!
    " What is this Vet specialized in?"
    specialties: [Specialty!]!
    " All of this Vet's visits"
    visits: VisitConnection!
}

" A Visit of a Pet in our PetClinic"
type Visit {
    " When did this Visit happen?"
    date: Date!
    " What did the Vet do during the Visit?"
    description: String!
    id: Int!
    pet: Pet!
    " Optional: which veterinary has done this treatment?"
    treatingVet: Vet
}

type VisitConnection {
    " total number of visits this VisitConnection represents"
    totalCount: Int!
    " the actual visits (might be an empty list)"
    visits: [Visit!]!
}

" The input for types of query orders"
enum OrderField {
    address
    city
    firstName
    id
    lastName
    telephone
}

" The input for types of query orders"
enum OrderDirection {
    ASC
    DESC
}

"A Type representing a date (without time, only a day)"
scalar Date

input AddOwnerInput {
    address: String!
    city: String!
    firstName: String!
    lastName: String!
    telephone: String!
}

" The Input for AddPet mutation"
input AddPetInput {
    birthDate: Date!
    name: String!
    ownerId: Int!
    typeId: Int!
}

" The input value for the addSpecialty Mutation"
input AddSpecialtyInput {
    name: String!
}

input AddVetInput {
    firstName: String!
    lastName: String!
    specialtyIds: [Int!]!
}

input AddVisitInput {
    date: Date!
    description: String!
    petId: Int!
    " Optional: specifiy the vet that should lead this visit"
    vetId: Int
}

" The input for owners query by a filter"
input OwnerFilter {
    address: String
    city: String
    firstName: String
    lastName: String
    telephone: String
}

" The input for owners query by order"
input OwnerOrder {
    field: OrderField!
    direction: OrderDirection = ASC
}

input RemoveSpecialtyInput {
    specialtyId: Int!
}

input UpdateOwnerInput {
    address: String
    city: String
    firstName: String
    lastName: String
    ownerId: Int!
    telephone: String
}

input UpdatePetInput {
    birthDate: Date
    name: String
    petId: Int!
    typeId: Int
}

"""

The input value for the updateSpecialty Mutation
Takes the id of the specialty that should be updated and it's new Name
"""
input UpdateSpecialtyInput {
    " The new name of the Specialty"
    name: String!
    " The id of the specialty that should be updated"
    specialtyId: Int!
}
